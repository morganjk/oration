var searchIndex = {};
searchIndex["oration"] = {"doc":"Oration: a Rocket/Elm self hosted commenting system for static sites.","items":[[3,"Initialise","oration","Information sent to the client upon initialisation.",null,null],[12,"user_ip","","The clients' ip address, hashed via Sha224.",0,null],[12,"blog_author","","The Sha224 hash of the blog author to distinguish the authority on this blog.",0,null],[12,"edit_timeout","","Time frame in which users can edit thier own comments.",0,null],[3,"CommentId","","Used in conjuction with `/delete?` and `/edit?`.",null,null],[12,"id","","The id of the requested comment.",1,null],[3,"Post","","Used in conjuction with `/count?` and `/comments?`.",null,null],[12,"url","","Gets the url for the request.",2,null],[3,"PostComments","","Comments to frontend",null,null],[12,"comments","","A nested set of comments.",3,null],[5,"rocket_route_fn_index","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"index","","Serve up the index file. This is only useful for development. Should not be used in a release.",null,{"inputs":[],"output":{"generics":["namedfile"],"name":"result"}}],[5,"rocket_route_fn_new_comment","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"new_comment","","Process comment input from form.",null,{"inputs":[{"name":"conn"},{"generics":["form","option"],"name":"result"},{"generics":["config"],"name":"state"},{"name":"socketaddr"}],"output":{"generics":["json","failure"],"name":"result"}}],[5,"rocket_route_fn_initialise","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"initialise","","Gets a Sha224 hash from a clients IP along with the blog's author hash.",null,{"inputs":[{"name":"socketaddr"},{"generics":["config"],"name":"state"}],"output":{"generics":["initialise"],"name":"json"}}],[5,"rocket_route_fn_delete_comment","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"delete_comment","","Requests comment deletion from a user, may or may not actually delete the comment based on a number of possibilities: authentication issues, over time, etc. Secondarily, the method of deletion may differ. If the comment has children it is not deleted entirely, but flagged so that the rest of the conversation is not automatically pruned.",null,{"inputs":[{"name":"conn"},{"generics":["config"],"name":"state"},{"name":"commentid"},{"name":"authhash"}],"output":{"generics":["string","failure"],"name":"result"}}],[5,"rocket_route_fn_edit_comment","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"edit_comment","","Requests an update to a comment from a user, which may or may not occur based on a number of possibilities: authentication issues, over time, etc.",null,{"inputs":[{"name":"conn"},{"generics":["config"],"name":"state"},{"name":"commentid"},{"name":"authhash"},{"generics":["form","option"],"name":"result"},{"name":"socketaddr"}],"output":{"generics":["json","failure"],"name":"result"}}],[5,"rocket_route_fn_like_comment","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"like_comment","","Likes a comment so long as the current user has not done so already.",null,{"inputs":[{"name":"conn"},{"name":"commentid"},{"name":"socketaddr"}],"output":{"generics":["string","custom"],"name":"result"}}],[5,"rocket_route_fn_dislike_comment","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"dislike_comment","","Dislikes a comment so long as the current user has not done so already.",null,{"inputs":[{"name":"conn"},{"name":"commentid"},{"name":"socketaddr"}],"output":{"generics":["string","custom"],"name":"result"}}],[5,"rocket_route_fn_get_session","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"get_session","","Test function that returns the session hash from the database.",null,{"inputs":[{"name":"conn"}],"output":{"name":"string"}}],[5,"rocket_route_fn_get_comments","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"get_comments","","Return a json block of comment data for the requested url.",null,{"inputs":[{"name":"conn"},{"name":"post"}],"output":{"generics":["json"],"name":"option"}}],[5,"rocket_route_fn_get_comment_count","","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"get_comment_count","","Returns the comment count for a given post from the database.",null,{"inputs":[{"name":"conn"},{"name":"post"}],"output":{"name":"string"}}],[5,"rocket","","Ignite Rocket, connect to the database and start serving data. Exposes a connection to the database so we can set the session on startup.",null,null],[5,"main","","Application entry point.",null,{"inputs":[],"output":null}],[0,"config","","Loads configuration data from disk.",null,null],[3,"Config","oration::config","The main struct which all input data from `oration.yaml` is pushed into.",null,null],[12,"host","","Top level location of the blog we are serving.",4,null],[12,"blog_name","","Name of the blog we are serving.",4,null],[12,"salt","","A salt for slightly more anonymous `anonymous` user identification.",4,null],[12,"author","","Blog Author to highlight as an authority in comments.",4,null],[12,"nesting_limit","","Limit of thread nesting in comments.",4,null],[12,"edit_timeout","","Time limit that restricts user editing of their own comments.",4,null],[12,"notifications","","Notification system and connection details.",4,null],[3,"Author","","Details of the blog author.",null,null],[12,"name","","Blog author's name.",5,null],[12,"email","","Blog author's email address.",5,null],[12,"url","","Blog author's website.",5,null],[12,"hash","","A Sha224 hash of the blog author's details (automitically generated).",5,null],[3,"Notifications","","Details of the email notification system.",null,null],[12,"new_comment","","Toggle if an email is to be sent when a new comment is posted.",6,null],[12,"smtp_server","","SMTP connection details.",6,null],[12,"recipient","","Who to send the notification to.",6,null],[3,"SMTPServer","","Details of the SMTP server which the notification system should connect to.",null,null],[12,"host","","SMTP host url. (No need for a protocol header).",7,null],[12,"user_name","","Username for authentication.",7,null],[12,"password","","Password for authentication.",7,null],[3,"SMTPServerIterator","","Iterator helper for `SMTPServer`",null,null],[12,"server","","The SMTPServer struct.",8,null],[12,"index","","A helper index.",8,null],[3,"Recipient","","Details of a person to email the notifications to.",null,null],[12,"email","","Recipient's email address.",9,null],[12,"name","","Recipient's name.",9,null],[17,"_IMPL_SERIALIZE_FOR_Config","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_Config","","",null,null],[17,"_IMPL_SERIALIZE_FOR_Author","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_Author","","",null,null],[17,"_IMPL_SERIALIZE_FOR_Notifications","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_Notifications","","",null,null],[17,"_IMPL_SERIALIZE_FOR_SMTPServer","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_SMTPServer","","",null,null],[17,"_IMPL_SERIALIZE_FOR_Recipient","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_Recipient","","",null,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"load","","Reads and parses data from the `oration.yaml` file and command line arguments.",4,{"inputs":[],"output":{"generics":["config","error"],"name":"result"}}],[11,"parse","","Additional checks to the configuration file that cannot be done implicitly by the type checker.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"gen_hash","","Generates a Sha224 hash for the blog author if details are set.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"db","oration","Handles the database connection pool.",null,null],[3,"Conn","oration::db","Connection request guard type: a wrapper around an r2d2 pooled connection.",null,null],[12,"0","","",10,null],[5,"init_pool","","Initializes a database pool.",null,{"inputs":[],"output":{"generics":["connectionmanager"],"name":"pool"}}],[6,"Pool","","An alias to the type for a pool of Diesel `SQLite` connections.",null,null],[11,"deref","","",10,null],[11,"from_request","","",10,{"inputs":[{"name":"request"}],"output":{"generics":["conn"],"name":"outcome"}}],[0,"models","oration","SQL <----> Rust inerop using Diesel.",null,null],[0,"preferences","oration::models","Preferences table.",null,null],[3,"Preference","oration::models::preferences","Queryable, Identifiable reference to the preferences table.",null,null],[12,"key","","Key",11,null],[12,"value","","Value",11,null],[5,"session_hash","","Generates a random hash used as a session ID.",null,{"inputs":[],"output":{"generics":["string","error"],"name":"result"}}],[17,"_IMPL_QUERYABLE_FOR_PREFERENCE","","",null,null],[11,"table","","",11,null],[11,"set_session","","Updates the sesssion key into the database only if the key does not exist. A default value is set in the migration schema and no other functions operate on this entry, so that should cover all bases.",11,{"inputs":[{"name":"sqliteconnection"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"get_session","","Returns the current session value from the database.",11,{"inputs":[{"name":"sqliteconnection"}],"output":{"generics":["string","error"],"name":"result"}}],[0,"threads","oration::models","Threads table.",null,null],[3,"Thread","oration::models::threads","Queryable reference to the threads table.",null,null],[12,"id","","Primary key",12,null],[12,"uri","","URI to the thread",12,null],[12,"title","","Thread title",12,null],[3,"NewThread","","Insertable reference to the threads table.",null,null],[12,"uri","","URI to the thread.",13,null],[12,"title","","Thread title.",13,null],[5,"gen_or_get_id","","Returns a thread ID given creation details about it. If the thread exists, an ID is returned directly, otherwise an entry is created for it first",null,{"inputs":[{"name":"sqliteconnection"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"generics":["i32","error"],"name":"result"}}],[5,"verify_post","","Checks that the path posted actually exists on the host. Should minimise the injection attack surface.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"create","","Saves a new thread for URI into the database. Returns the id of the new record.",null,{"inputs":[{"name":"sqliteconnection"},{"name":"str"},{"generics":["str"],"name":"option"}],"output":{"generics":["i32","error"],"name":"result"}}],[5,"get_id","","Returns the id of a thread from the database for a given URI.",null,{"inputs":[{"name":"sqliteconnection"},{"name":"str"}],"output":{"generics":["i32","error"],"name":"result"}}],[17,"_IMPL_SERIALIZE_FOR_Thread","","",null,null],[17,"_IMPL_QUERYABLE_FOR_THREAD","","",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"comments","oration::models","Comments table.",null,null],[3,"Comment","oration::models::comments","Queryable reference to the comments table.",null,null],[12,"id","","Primary key.",14,null],[12,"tid","","Reference to Thread.",14,null],[12,"parent","","Parent comment.",14,null],[12,"created","","Timestamp of creation.",14,null],[12,"modified","","Date modified it that's happened.",14,null],[12,"mode","","If the comment is live or under review.",14,null],[12,"remote_addr","","Remote IP.",14,null],[12,"text","","Actual comment.",14,null],[12,"author","","Commentors author if given.",14,null],[12,"email","","Commentors email address if given.",14,null],[12,"website","","Commentors website if given.",14,null],[12,"hash","","Commentors idenifier hash.",14,null],[12,"likes","","Number of likes a comment has recieved.",14,null],[12,"dislikes","","Number of dislikes a comment has recieved.",14,null],[12,"voters","","Who are the voters on this comment.",14,null],[3,"NewComment","","Insertable reference to the comments table.",null,null],[12,"tid","","Reference to Thread.",15,null],[12,"parent","","Parent comment.",15,null],[12,"created","","Timestamp of creation.",15,null],[12,"modified","","Date modified it that's happened.",15,null],[12,"mode","","If the comment is live or under review. By default an active comment has mode 0. If the admin has reviews turned on, all new comments will be flagged as mode 1, or will be set with a default mode 0 if this feature is not enabled. A comment with mode 2 indicates this comment is `deleted`, although it contains responses below it. The deleted comment with therefore be handled differently.",15,null],[12,"remote_addr","","Remote IP.",15,null],[12,"text","","Actual comment.",15,null],[12,"author","","Commentors author if given.",15,null],[12,"email","","Commentors email address if given.",15,null],[12,"website","","Commentors website if given.",15,null],[12,"hash","","Sha224 hash to identify commentor.",15,null],[12,"likes","","Number of likes a comment has recieved.",15,null],[12,"dislikes","","Number of dislikes a comment has recieved.",15,null],[12,"voters","","Who are the voters on this comment.",15,null],[3,"VotersBlob","","",null,null],[12,"bitmap","","",16,null],[12,"bits","","",16,null],[12,"hashes","","",16,null],[12,"sip_keys","","",16,null],[3,"ModeDelete","","Changes required when we must use the flagged delete option.",null,null],[12,"mode","","If the comment is live or under review.",17,null],[12,"remote_addr","","Remote IP.",17,null],[12,"text","","Actual comment.",17,null],[12,"author","","Commentors author if given.",17,null],[12,"email","","Commentors email address if given.",17,null],[12,"website","","Commentors website if given.",17,null],[12,"hash","","Commentors idenifier hash.",17,null],[12,"likes","","Number of likes a comment has recieved.",17,null],[12,"dislikes","","Number of dislikes a comment has recieved.",17,null],[12,"voters","","Who are the voters on this comment.",17,null],[3,"PrintedComment","","Subset of the comments table which is to be sent to the frontend.",null,null],[12,"id","","Primary key.",18,null],[12,"parent","","Parent comment.",18,null],[12,"text","","Actual comment.",18,null],[12,"author","","Commentors author if given.",18,null],[12,"email","","Commentors email address if given.",18,null],[12,"url","","Commentors website if given.",18,null],[12,"hash","","Commentors indentifier.",18,null],[12,"created","","Timestamp of creation.",18,null],[12,"likes","","Number of likes a comment has recieved.",18,null],[12,"dislikes","","Number of dislikes a comment has recieved.",18,null],[3,"InsertedComment","","Subset of the comment which was just inserted. This data is needed to populate the frontend without calling for a complete refresh.",null,null],[12,"id","","Primary key.",19,null],[12,"parent","","Parent comment.",19,null],[12,"author","","Commentors details.",19,null],[3,"CommentEdits","","Subset of the comment which was just edited. This data is needed to populate the frontend without calling for a complete refresh.",null,null],[12,"id","","Primary key.",20,null],[12,"author","","Commentors details.",20,null],[12,"text","","Actual comment.",20,null],[12,"hash","","Commentors indentifier.",20,null],[3,"NestedComment","","Subset of the comments table which is to be nested and sent to the frontend.",null,null],[12,"id","","Primary key.",21,null],[12,"text","","Actual comment.",21,null],[12,"author","","Commentors author if given.",21,null],[12,"hash","","Commentors indentifier.",21,null],[12,"created","","Timestamp of creation.",21,null],[12,"children","","Comment children.",21,null],[12,"votes","","Total number of votes.",21,null],[5,"nesting_check","","Checks if this comment is nested too deep based on the configuration file value. If so, don't allow this to happen and just post as a reply to the previous parent.",null,{"inputs":[{"name":"sqliteconnection"},{"name":"option"},{"name":"u32"}],"output":{"generics":["option","error"],"name":"result"}}],[5,"gen_hash","","Generates a Sha224 hash of author details. If none are set, then the possiblity of using a clients' IP address is available.",null,{"inputs":[{"name":"option"},{"name":"option"},{"name":"option"},{"generics":["str"],"name":"option"}],"output":{"name":"string"}}],[5,"update_authorised","","",null,{"inputs":[{"name":"sqliteconnection"},{"name":"authhash"},{"name":"i32"},{"name":"f32"}],"output":{"generics":["error"],"name":"result"}}],[5,"build_tree","","Construct a nested comment tree from the flat indexed data obtained from the database.",null,null],[5,"get_author","","Generates a value for author depending on the completeness of the author profile.",null,{"inputs":[{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"generics":["string"],"name":"option"}}],[5,"count_votes","","Calculates the total vote for a comment based on its likes and dislikes.",null,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"i32"}}],[17,"_IMPL_QUERYABLE_FOR_COMMENT","","",null,null],[17,"_IMPL_SERIALIZE_FOR_VotersBlob","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_VotersBlob","","",null,null],[17,"_IMPL_SERIALIZE_FOR_PrintedComment","","",null,null],[17,"_IMPL_QUERYABLE_FOR_PRINTEDCOMMENT","","",null,null],[17,"_IMPL_SERIALIZE_FOR_InsertedComment","","",null,null],[17,"_IMPL_SERIALIZE_FOR_CommentEdits","","",null,null],[17,"_IMPL_SERIALIZE_FOR_NestedComment","","",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"count","","Returns the number of comments for a given post denoted via the `path` variable.",14,{"inputs":[{"name":"sqliteconnection"},{"name":"str"}],"output":{"generics":["i64","error"],"name":"result"}}],[11,"insert","","Stores a new comment into the database.",14,{"inputs":[{"name":"sqliteconnection"},{"name":"i32"},{"name":"forminput"},{"name":"str"},{"name":"u32"}],"output":{"generics":["insertedcomment","error"],"name":"result"}}],[11,"delete","","Deletes a comment if there is no children, marks as deleted if there are children.",14,{"inputs":[{"name":"sqliteconnection"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[11,"update","","Updates a comment.",14,{"inputs":[{"name":"sqliteconnection"},{"name":"i32"},{"name":"formedit"},{"name":"str"}],"output":{"generics":["commentedits","error"],"name":"result"}}],[11,"vote","","Called from the like and dislike functions and updates the vote tally for the given comment, provided the user is able to vote on this comment. We use the user's IP address here rather than the hash to ratelimit voting from the same IP by changing user details or spamming hash headers.",14,{"inputs":[{"name":"sqliteconnection"},{"name":"i32"},{"name":"str"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"votersblob"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"votersblob"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",16,{"inputs":[{"name":"bloom"}],"output":{"name":"votersblob"}}],[11,"store","","",16,{"inputs":[{"name":"self"},{"name":"sqliteconnection"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"list","","Returns a list of all comments for a given post denoted via the `path` variable.",18,{"inputs":[{"name":"sqliteconnection"},{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"get","","Returns a comment based on its' unique ID.",18,{"inputs":[{"name":"sqliteconnection"},{"name":"i32"}],"output":{"generics":["printedcomment","error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new nested comment from a PrintedComment and a set of precalculated NestedComment children.",19,{"inputs":[{"name":"printedcomment"}],"output":{"name":"insertedcomment"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new nested comment from a PrintedComment and a set of precalculated NestedComment children.",20,{"inputs":[{"name":"printedcomment"}],"output":{"name":"commentedits"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new nested comment from a PrintedComment and a set of precalculated NestedComment children.",21,{"inputs":[{"name":"printedcomment"},{"generics":["nestedcomment"],"name":"vec"}],"output":{"name":"nestedcomment"}}],[11,"list","","Returns a list of all comments, nested, for a given post denoted via the `path` variable.",21,{"inputs":[{"name":"sqliteconnection"},{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[0,"schema","oration","Verbose schema for the comment database.",null,null],[0,"comments","oration::schema","",null,null],[3,"table","oration::schema::comments","The actual table struct",null,null],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",null,null],[0,"columns","","Contains all of the columns of this table",null,null],[3,"star","oration::schema::comments::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",null,null],[3,"id","","",null,null],[3,"tid","","",null,null],[3,"parent","","",null,null],[3,"created","","",null,null],[3,"modified","","",null,null],[3,"mode","","",null,null],[3,"remote_addr","","",null,null],[3,"text","","",null,null],[3,"author","","",null,null],[3,"email","","",null,null],[3,"website","","",null,null],[3,"hash","","",null,null],[3,"likes","","",null,null],[3,"dislikes","","",null,null],[3,"voters","","",null,null],[17,"_IMPL_QUERY_ID_FOR_ID","","",null,null],[17,"_IMPL_QUERY_ID_FOR_TID","","",null,null],[17,"_IMPL_QUERY_ID_FOR_PARENT","","",null,null],[17,"_IMPL_QUERY_ID_FOR_CREATED","","",null,null],[17,"_IMPL_QUERY_ID_FOR_MODIFIED","","",null,null],[17,"_IMPL_QUERY_ID_FOR_MODE","","",null,null],[17,"_IMPL_QUERY_ID_FOR_REMOTE_ADDR","","",null,null],[17,"_IMPL_QUERY_ID_FOR_TEXT","","",null,null],[17,"_IMPL_QUERY_ID_FOR_AUTHOR","","",null,null],[17,"_IMPL_QUERY_ID_FOR_EMAIL","","",null,null],[17,"_IMPL_QUERY_ID_FOR_WEBSITE","","",null,null],[17,"_IMPL_QUERY_ID_FOR_HASH","","",null,null],[17,"_IMPL_QUERY_ID_FOR_LIKES","","",null,null],[17,"_IMPL_QUERY_ID_FOR_DISLIKES","","",null,null],[17,"_IMPL_QUERY_ID_FOR_VOTERS","","",null,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"walk_ast","","",22,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"walk_ast","","",23,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",23,null],[11,"add","","",23,null],[11,"sub","","",23,null],[11,"div","","",23,null],[11,"mul","","",23,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"tid"}}],[11,"walk_ast","","",24,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",24,null],[11,"add","","",24,null],[11,"sub","","",24,null],[11,"div","","",24,null],[11,"mul","","",24,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"parent"}}],[11,"walk_ast","","",25,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",25,null],[11,"add","","",25,null],[11,"sub","","",25,null],[11,"div","","",25,null],[11,"mul","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"created"}}],[11,"walk_ast","","",26,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",26,null],[11,"add","","",26,null],[11,"sub","","",26,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"modified"}}],[11,"walk_ast","","",27,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",27,null],[11,"add","","",27,null],[11,"sub","","",27,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"walk_ast","","",28,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",28,null],[11,"add","","",28,null],[11,"sub","","",28,null],[11,"div","","",28,null],[11,"mul","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"remote_addr"}}],[11,"walk_ast","","",29,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",29,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"walk_ast","","",30,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",30,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"author"}}],[11,"walk_ast","","",31,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",31,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"email"}}],[11,"walk_ast","","",32,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",32,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"website"}}],[11,"walk_ast","","",33,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",33,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"hash"}}],[11,"walk_ast","","",34,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",34,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"likes"}}],[11,"walk_ast","","",35,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",35,null],[11,"add","","",35,null],[11,"sub","","",35,null],[11,"div","","",35,null],[11,"mul","","",35,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dislikes"}}],[11,"walk_ast","","",36,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",36,null],[11,"add","","",36,null],[11,"sub","","",36,null],[11,"div","","",36,null],[11,"mul","","",36,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"voters"}}],[11,"walk_ast","","",37,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",37,null],[6,"SqlType","oration::schema::comments","The SQL type of all of the columns on this table",null,null],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",null,null],[17,"all_columns","","A tuple of all of the columns on this table",null,null],[17,"_IMPL_QUERY_ID_FOR_TABLE","","",null,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",38,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"from_clause","","",38,null],[11,"default_selection","","",38,null],[11,"as_query","","",38,null],[11,"primary_key","","",38,null],[11,"all_columns","","",38,null],[11,"table","","",38,null],[11,"into_update_target","","",38,{"inputs":[{"name":"self"}],"output":{"name":"updatetarget"}}],[11,"join_target","","",38,null],[11,"join_target","","",38,null],[11,"join_target","","",38,null],[11,"join_target","","",38,null],[0,"preferences","oration::schema","",null,null],[3,"table","oration::schema::preferences","The actual table struct",null,null],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",null,null],[0,"columns","","Contains all of the columns of this table",null,null],[3,"star","oration::schema::preferences::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",null,null],[3,"key","","",null,null],[3,"value","","",null,null],[17,"_IMPL_QUERY_ID_FOR_KEY","","",null,null],[17,"_IMPL_QUERY_ID_FOR_VALUE","","",null,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"walk_ast","","",39,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"walk_ast","","",40,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",40,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"walk_ast","","",41,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",41,null],[6,"SqlType","oration::schema::preferences","The SQL type of all of the columns on this table",null,null],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",null,null],[17,"all_columns","","A tuple of all of the columns on this table",null,null],[17,"_IMPL_QUERY_ID_FOR_TABLE","","",null,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",42,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"from_clause","","",42,null],[11,"default_selection","","",42,null],[11,"as_query","","",42,null],[11,"primary_key","","",42,null],[11,"all_columns","","",42,null],[11,"table","","",42,null],[11,"into_update_target","","",42,{"inputs":[{"name":"self"}],"output":{"name":"updatetarget"}}],[11,"join_target","","",42,null],[11,"join_target","","",42,null],[11,"join_target","","",42,null],[11,"join_target","","",42,null],[0,"threads","oration::schema","",null,null],[3,"table","oration::schema::threads","The actual table struct",null,null],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",null,null],[0,"columns","","Contains all of the columns of this table",null,null],[3,"star","oration::schema::threads::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",null,null],[3,"id","","",null,null],[3,"uri","","",null,null],[3,"title","","",null,null],[17,"_IMPL_QUERY_ID_FOR_ID","","",null,null],[17,"_IMPL_QUERY_ID_FOR_URI","","",null,null],[17,"_IMPL_QUERY_ID_FOR_TITLE","","",null,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"walk_ast","","",43,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"walk_ast","","",44,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",44,null],[11,"add","","",44,null],[11,"sub","","",44,null],[11,"div","","",44,null],[11,"mul","","",44,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"walk_ast","","",45,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",45,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"title"}}],[11,"walk_ast","","",46,{"inputs":[{"name":"self"},{"name":"astpass"}],"output":{"name":"queryresult"}}],[11,"eq_all","","",46,null],[6,"SqlType","oration::schema::threads","The SQL type of all of the columns on this table",null,null],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",null,null],[17,"all_columns","","A tuple of all of the columns on this table",null,null],[17,"_IMPL_QUERY_ID_FOR_TABLE","","",null,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",47,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"from_clause","","",47,null],[11,"default_selection","","",47,null],[11,"as_query","","",47,null],[11,"primary_key","","",47,null],[11,"all_columns","","",47,null],[11,"table","","",47,null],[11,"into_update_target","","",47,{"inputs":[{"name":"self"}],"output":{"name":"updatetarget"}}],[11,"join_target","","",47,null],[11,"join_target","","",47,null],[11,"join_target","","",47,null],[11,"join_target","","",47,null],[11,"join_target","oration::schema::comments","",38,null],[11,"join_target","oration::schema::threads","",47,null],[0,"static_files","oration","Serves up static files through Rocket.",null,null],[5,"rocket_route_fn_files","oration::static_files","",null,{"inputs":[{"name":"request"},{"name":"data"}],"output":{"name":"outcome"}}],[5,"files","","Call serves any requested static file from public.",null,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["namedfile"],"name":"option"}}],[7,"static_rocket_route_info_for_files","","Rocket code generated static route information structure.",null,null],[0,"errors","oration","Handles the error chain of the program.",null,null],[3,"Error","oration::errors","The Error type.",null,null],[12,"0","","The kind of the error.",48,null],[12,"1","","Contains the error chain and the backtrace.",48,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",49,null],[13,"SessionHash","","",49,null],[13,"NoSession","","",49,null],[13,"NoThread","","",49,null],[13,"DBRead","","",49,null],[13,"DBInsert","","",49,null],[13,"Unauthorized","","",49,null],[13,"Rand","","",49,null],[13,"ConfigLoad","","",49,null],[13,"ConfigParse","","",49,null],[13,"Deserialize","","",49,null],[13,"Serialize","","",49,null],[13,"NoHTTPHandle","","",49,null],[13,"EmptySMTP","","",49,null],[13,"EmptyRecipientEmail","","",49,null],[13,"Request","","",49,null],[13,"PathCheckFailed","","",49,null],[13,"BuildEmail","","",49,null],[13,"SendEmail","","",49,null],[13,"BuildSmtpTransport","","",49,null],[13,"AlreadyVoted","","",49,null],[13,"__Nonexhaustive","","",49,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",50,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",48,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",48,null],[11,"with_chain","","",48,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",48,null],[11,"iter","","",48,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"extract_backtrace","","",48,{"inputs":[{"name":"error"}],"output":{"generics":["arc"],"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",48,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",48,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",48,{"inputs":[{"generics":["error"],"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",48,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",48,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",48,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","",48,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",48,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",48,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",48,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",48,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",49,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",49,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",49,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",49,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[0,"notify","oration","Sends notification emails to admin.",null,null],[5,"get_domain","oration::notify","Parses a URL, returning just the domain portion. The regex is overkill for this at the moment, but I think it may be usefull in the future to have this ability.",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[5,"send_notification","","Sends an email to a recipient listed in the configuration file when a new comment is posted, so long as the notification system is enabled (this check is elsewhere).",null,{"inputs":[{"name":"forminput"},{"name":"notifications"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[0,"data","oration","Houses Data Structures that are needed in multiple modules.",null,null],[3,"FormInput","oration::data","Incoming data from the web based form for a new comment.",null,null],[12,"comment","","Comment from textarea.",51,null],[12,"parent","","Parent comment if any.",51,null],[12,"name","","Optional name.",51,null],[12,"email","","Optional email.",51,null],[12,"url","","Optional website.",51,null],[12,"title","","Title of post.",51,null],[12,"path","","Path of post.",51,null],[3,"FormEdit","","Incoming data from the web based form for an edited comment.",null,null],[12,"comment","","Comment from textarea.",52,null],[12,"name","","Optional name.",52,null],[12,"email","","Optional email.",52,null],[12,"url","","Optional website.",52,null],[3,"AuthHash","","Hash of the user which wants to edit/delete a comment",null,null],[12,"0","","",53,null],[11,"from_form","","",51,{"inputs":[{"name":"formitems"},{"name":"bool"}],"output":{"generics":["forminput","error"],"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sender_name","","Yields the senders name with a default if is empty.",51,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"sender_email","","Yields the senders email address with a default if is empty.",51,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_form","","",52,{"inputs":[{"name":"formitems"},{"name":"bool"}],"output":{"generics":["formedit","error"],"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"authhash"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"authhash"}],"output":{"name":"bool"}}],[11,"from_request","","",53,{"inputs":[{"name":"request"}],"output":{"generics":["authhash"],"name":"outcome"}}],[11,"matches","","",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[7,"static_rocket_route_info_for_index","oration","Rocket code generated static route information structure.",null,null],[7,"static_rocket_route_info_for_new_comment","","Rocket code generated static route information structure.",null,null],[7,"static_rocket_route_info_for_initialise","","Rocket code generated static route information structure.",null,null],[7,"static_rocket_route_info_for_delete_comment","","Rocket code generated static route information structure.",null,null],[7,"static_rocket_route_info_for_edit_comment","","Rocket code generated static route information structure.",null,null],[7,"static_rocket_route_info_for_like_comment","","Rocket code generated static route information structure.",null,null],[7,"static_rocket_route_info_for_dislike_comment","","Rocket code generated static route information structure.",null,null],[7,"static_rocket_route_info_for_get_session","","Rocket code generated static route information structure.",null,null],[7,"static_rocket_route_info_for_get_comments","","Rocket code generated static route information structure.",null,null],[7,"static_rocket_route_info_for_get_comment_count","","Rocket code generated static route information structure.",null,null],[17,"_IMPL_SERIALIZE_FOR_Initialise","","",null,null],[17,"_IMPL_SERIALIZE_FOR_PostComments","","",null,null],[11,"from_form","","",1,{"inputs":[{"name":"formitems"},{"name":"bool"}],"output":{"generics":["commentid","error"],"name":"result"}}],[11,"from_form","","",2,{"inputs":[{"name":"formitems"},{"name":"bool"}],"output":{"generics":["post","error"],"name":"result"}}]],"paths":[[3,"Initialise"],[3,"CommentId"],[3,"Post"],[3,"PostComments"],[3,"Config"],[3,"Author"],[3,"Notifications"],[3,"SMTPServer"],[3,"SMTPServerIterator"],[3,"Recipient"],[3,"Conn"],[3,"Preference"],[3,"Thread"],[3,"NewThread"],[3,"Comment"],[3,"NewComment"],[3,"VotersBlob"],[3,"ModeDelete"],[3,"PrintedComment"],[3,"InsertedComment"],[3,"CommentEdits"],[3,"NestedComment"],[3,"star"],[3,"id"],[3,"tid"],[3,"parent"],[3,"created"],[3,"modified"],[3,"mode"],[3,"remote_addr"],[3,"text"],[3,"author"],[3,"email"],[3,"website"],[3,"hash"],[3,"likes"],[3,"dislikes"],[3,"voters"],[3,"table"],[3,"star"],[3,"key"],[3,"value"],[3,"table"],[3,"star"],[3,"id"],[3,"uri"],[3,"title"],[3,"table"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[3,"FormInput"],[3,"FormEdit"],[3,"AuthHash"]]};
initSearch(searchIndex);
